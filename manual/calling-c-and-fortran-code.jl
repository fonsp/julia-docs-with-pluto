### A Pluto.jl notebook ###
# v0.14.2

using Markdown
using InteractiveUtils

# ╔═╡ 03ba643e-9e19-11eb-070f-c5685933a98f
md"""
# Calling C and Fortran Code
"""

# ╔═╡ 03ba6510-9e19-11eb-10df-993861137fab
md"""
Though most code can be written in Julia, there are many high-quality, mature libraries for numerical computing already written in C and Fortran. To allow easy use of this existing code, Julia makes it simple and efficient to call C and Fortran functions. Julia has a "no boilerplate" philosophy: functions can be called directly from Julia without any "glue" code, code generation, or compilation – even from the interactive prompt. This is accomplished just by making an appropriate call with [`ccall`](@ref) syntax, which looks like an ordinary function call.
"""

# ╔═╡ 03ba6556-9e19-11eb-133c-03e4c16ea76b
md"""
The code to be called must be available as a shared library. Most C and Fortran libraries ship compiled as shared libraries already, but if you are compiling the code yourself using GCC (or Clang), you will need to use the `-shared` and `-fPIC` options. The machine instructions generated by Julia's JIT are the same as a native C call would be, so the resulting overhead is the same as calling a library function from C code. [^1]
"""

# ╔═╡ 03ba657e-9e19-11eb-2895-4bd0db5a8e87
md"""
Shared libraries and functions are referenced by a tuple of the form `(:function, "library")` or `("function", "library")` where `function` is the C-exported function name, and `library` refers to the shared library name.  Shared libraries available in the (platform-specific) load path will be resolved by name.  The full path to the library may also be specified.
"""

# ╔═╡ 03ba659c-9e19-11eb-23dd-97c7b0056b3c
md"""
A function name may be used alone in place of the tuple (just `:function` or `"function"`). In this case the name is resolved within the current process. This form can be used to call C library functions, functions in the Julia runtime, or functions in an application linked to Julia.
"""

# ╔═╡ 03ba65ee-9e19-11eb-2477-63f2afd0e864
md"""
By default, Fortran compilers [generate mangled names](https://en.wikipedia.org/wiki/Name_mangling#Fortran) (for example, converting function names to lowercase or uppercase, often appending an underscore), and so to call a Fortran function via [`ccall`](@ref) you must pass the mangled identifier corresponding to the rule followed by your Fortran compiler.  Also, when calling a Fortran function, all inputs must be passed as pointers to allocated values on the heap or stack. This applies not only to arrays and other mutable objects which are normally heap-allocated, but also to scalar values such as integers and floats which are normally stack-allocated and commonly passed in registers when using C or Julia calling conventions.
"""

# ╔═╡ 03ba6620-9e19-11eb-1c97-69ee84b964fe
md"""
Finally, you can use [`ccall`](@ref) to actually generate a call to the library function. The arguments to [`ccall`](@ref) are:
"""

# ╔═╡ 03ba6826-9e19-11eb-0b69-95ce6ac3d4d2
md"""
1. A `(:function, "library")` pair (most common),

    OR

    a `:function` name symbol or `"function"` name string (for symbols in the current process or libc),

    OR

    a function pointer (for example, from `dlsym`).
2. The function's return type
3. A tuple of input types, corresponding to the function signature
4. The actual argument values to be passed to the function, if any; each is a separate parameter.
"""

# ╔═╡ 03ba692a-9e19-11eb-3bbf-65a779ebfc43
md"""
!!! note
    The `(:function, "library")` pair, return type, and input types must be literal constants (i.e., they can't be variables, but see [Non-constant Function Specifications](@ref) below).

    The remaining parameters are evaluated at compile time, when the containing method is defined.
"""

# ╔═╡ 03ba6966-9e19-11eb-17b7-a59fbb060037
md"""
!!! note
    See below for how to [map C types to Julia types](@ref mapping-c-types-to-julia).
"""

# ╔═╡ 03ba698e-9e19-11eb-3c34-5b9dbdeb1d9a
md"""
As a complete but simple example, the following calls the `clock` function from the standard C library on most Unix-derived systems:
"""

# ╔═╡ 03ba70dc-9e19-11eb-00b7-994dc86689e5
t = ccall(:clock, Int32, ())

# ╔═╡ 03ba70e6-9e19-11eb-0f9d-056c7177f56a
t

# ╔═╡ 03ba70e6-9e19-11eb-1be5-0b05eff62259
typeof(t)

# ╔═╡ 03ba712a-9e19-11eb-17a7-f1a6ce11e8d1
md"""
`clock` takes no arguments and returns an [`Int32`](@ref). One common mistake is forgetting that a 1-tuple of argument types must be written with a trailing comma. For example, to call the `getenv` function to get a pointer to the value of an environment variable, one makes a call like this:
"""

# ╔═╡ 03ba7582-9e19-11eb-2600-4f3981054e4c
path = ccall(:getenv, Cstring, (Cstring,), "SHELL")

# ╔═╡ 03ba758c-9e19-11eb-1a3c-a126d6bf15ca
unsafe_string(path)

# ╔═╡ 03ba75be-9e19-11eb-2872-87d81df67f70
md"""
Note that the argument type tuple must be written as `(Cstring,)`, not `(Cstring)`. This is because `(Cstring)` is just the expression `Cstring` surrounded by parentheses, rather than a 1-tuple containing `Cstring`:
"""

# ╔═╡ 03ba76ea-9e19-11eb-1a30-833c62c8f558
(Cstring)

# ╔═╡ 03ba76fc-9e19-11eb-07ec-47c2a8d56333
(Cstring,)

# ╔═╡ 03ba7730-9e19-11eb-2a7e-934f91d92d0d
md"""
In practice, especially when providing reusable functionality, one generally wraps [`ccall`](@ref) uses in Julia functions that set up arguments and then check for errors in whatever manner the C or Fortran function specifies. And if an error occurs it is thrown as a normal Julia exception. This is especially important since C and Fortran APIs are notoriously inconsistent about how they indicate error conditions. For example, the `getenv` C library function is wrapped in the following Julia function, which is a simplified version of the actual definition from [`env.jl`](https://github.com/JuliaLang/julia/blob/master/base/env.jl):
"""

# ╔═╡ 03ba7780-9e19-11eb-075d-0bcd26e517bc
md"""
```julia
function getenv(var::AbstractString)
    val = ccall(:getenv, Cstring, (Cstring,), var)
    if val == C_NULL
        error("getenv: undefined variable: ", var)
    end
    return unsafe_string(val)
end
```
"""

# ╔═╡ 03ba77bc-9e19-11eb-1727-5787f55f870d
md"""
The C `getenv` function indicates an error by returning `NULL`, but other standard C functions indicate errors in various different ways, including by returning -1, 0, 1 and other special values. This wrapper throws an exception clearly indicating the problem if the caller tries to get a non-existent environment variable:
"""

# ╔═╡ 03ba79cc-9e19-11eb-1e62-990abda139ef
getenv("SHELL")

# ╔═╡ 03ba79d8-9e19-11eb-3e09-d32ca380b1fe
getenv("FOOBAR")

# ╔═╡ 03ba7b68-9e19-11eb-0461-35b58a7c2700
md"""
Here is a slightly more complex example that discovers the local machine's hostname. In this example, the networking library code is assumed to be in a shared library named "libc". In practice, this function is usually part of the C standard library, and so the "libc" portion should be omitted, but we wish to show here the usage of this syntax.
"""

# ╔═╡ 03ba7be0-9e19-11eb-1838-254f9a1def6f
md"""
```julia
function gethostname()
    hostname = Vector{UInt8}(undef, 256) # MAXHOSTNAMELEN
    err = ccall((:gethostname, "libc"), Int32,
                (Ptr{UInt8}, Csize_t),
                hostname, sizeof(hostname))
    Base.systemerror("gethostname", err != 0)
    hostname[end] = 0 # ensure null-termination
    return GC.@preserve hostname unsafe_string(pointer(hostname))
end
```
"""

# ╔═╡ 03ba7c26-9e19-11eb-2d08-19e8068c81d1
md"""
This example first allocates an array of bytes. It then calls the C library function `gethostname` to populate the array with the hostname. Finally, it takes a pointer to the hostname buffer, and converts the pointer to a Julia string, assuming that it is a NUL-terminated C string.
"""

# ╔═╡ 03ba7d34-9e19-11eb-1566-8dceda81924b
md"""
It is common for C libraries to use this pattern of requiring the caller to allocate memory to be passed to the callee and populated. Allocation of memory from Julia like this is generally accomplished by creating an uninitialized array and passing a pointer to its data to the C function. This is why we don't use the `Cstring` type here: as the array is uninitialized, it could contain NUL bytes. Converting to a `Cstring` as part of the [`ccall`](@ref) checks for contained NUL bytes and could therefore throw a conversion error.
"""

# ╔═╡ 03ba7d66-9e19-11eb-1fbf-05157d76822f
md"""
Deferencing `pointer(hostname)` with `unsafe_string` is an unsafe operation as it requires access to the memory allocated for `hostname` that may have been in the meanwhile garbage collected. The macro [`GC.@preserve`](@ref) prevents this from happening and therefore accessing an invalid memory location.
"""

# ╔═╡ 03ba7dc0-9e19-11eb-3853-6b7e25968f77
md"""
## Creating C-Compatible Julia Function Pointers
"""

# ╔═╡ 03ba7dd2-9e19-11eb-0a24-f92b7f965d21
md"""
It is possible to pass Julia functions to native C functions that accept function pointer arguments. For example, to match C prototypes of the form:
"""

# ╔═╡ 03ba8004-9e19-11eb-13ec-bf1fa8b19722
typedef returntype

# ╔═╡ 03ba8068-9e19-11eb-1e31-ebe5df70dafb
md"""
The macro [`@cfunction`](@ref) generates the C-compatible function pointer for a call to a Julia function. The arguments to [`@cfunction`](@ref) are:
"""

# ╔═╡ 03ba8126-9e19-11eb-2563-a9f456653e3e
md"""
1. A Julia function
2. The function's return type
3. A tuple of input types, corresponding to the function signature
"""

# ╔═╡ 03ba818a-9e19-11eb-3008-df66929167f9
md"""
!!! note
    As with `ccall`, the return type and tuple of input types must be literal constants.
"""

# ╔═╡ 03ba8202-9e19-11eb-1827-498c2d893a73
md"""
!!! note
    Currently, only the platform-default C calling convention is supported. This means that `@cfunction`-generated pointers cannot be used in calls where WINAPI expects a `stdcall` function on 32-bit Windows, but can be used on WIN64 (where `stdcall` is unified with the C calling convention).
"""

# ╔═╡ 03ba8216-9e19-11eb-3f1f-61909de5d15e
md"""
A classic example is the standard C library `qsort` function, declared as:
"""

# ╔═╡ 03ba82fc-9e19-11eb-0bba-0360b08ab80e
void qsort

# ╔═╡ 03ba8356-9e19-11eb-2791-c9b68103746e
md"""
The `base` argument is a pointer to an array of length `nmemb`, with elements of `size` bytes each. `compare` is a callback function which takes pointers to two elements `a` and `b` and returns an integer less/greater than zero if `a` should appear before/after `b` (or zero if any order is permitted).
"""

# ╔═╡ 03ba83b0-9e19-11eb-0da2-b925d354cb52
md"""
Now, suppose that we have a 1-d array `A` of values in Julia that we want to sort using the `qsort` function (rather than Julia's built-in `sort` function). Before we consider calling `qsort` and passing arguments, we need to write a comparison function:
"""

# ╔═╡ 03ba8c16-9e19-11eb-3ab7-25b50ba4e216
function mycompare(a, b)::Cint
           return (a < b) ? -1 : ((a > b) ? +1 : 0)
       end

# ╔═╡ 03ba8c5c-9e19-11eb-3e80-11e0fcb79ebf
md"""
`qsort` expects a comparison function that return a C `int`, so we annotate the return type to be `Cint`.
"""

# ╔═╡ 03ba8c86-9e19-11eb-1122-697a8c23f369
md"""
In order to pass this function to C, we obtain its address using the macro `@cfunction`:
"""

# ╔═╡ 03ba9062-9e19-11eb-124a-37cfc86c5817
mycompare_c = @cfunction(mycompare, Cint, (Ref{Cdouble}, Ref{Cdouble}));

# ╔═╡ 03ba90a8-9e19-11eb-32ef-99bac8057fee
md"""
[`@cfunction`](@ref) requires three arguments: the Julia function (`mycompare`), the return type (`Cint`), and a literal tuple of the input argument types, in this case to sort an array of `Cdouble` ([`Float64`](@ref)) elements.
"""

# ╔═╡ 03ba90ba-9e19-11eb-3f33-9744fc47114f
md"""
The final call to `qsort` looks like this:
"""

# ╔═╡ 03ba9878-9e19-11eb-3d56-83b31eb6a7d5
A = [1.3, -2.7, 4.4, 3.1]

# ╔═╡ 03ba9882-9e19-11eb-2c74-c95c2cb584c9
ccall(:qsort, Cvoid, (Ptr{Cdouble}, Csize_t, Csize_t, Ptr{Cvoid}),
             A, length(A), sizeof(eltype(A)), mycompare_c)

# ╔═╡ 03ba9882-9e19-11eb-0180-f502636abf8b
A

# ╔═╡ 03ba98b4-9e19-11eb-33b7-79941b911c70
md"""
As the example shows, the original Julia array `A` has now been sorted: `[-2.7, 1.3, 3.1, 4.4]`. Note that Julia [takes care of converting the array to a `Ptr{Cdouble}`](@ref automatic-type-conversion)), computing the size of the element type in bytes, and so on.
"""

# ╔═╡ 03ba98e6-9e19-11eb-2530-2bbdb5f1f964
md"""
For fun, try inserting a `println("mycompare($a, $b)")` line into `mycompare`, which will allow you to see the comparisons that `qsort` is performing (and to verify that it is really calling the Julia function that you passed to it).
"""

# ╔═╡ 03ba9904-9e19-11eb-1e18-e580ab54940b
md"""
## [Mapping C Types to Julia](@id mapping-c-types-to-julia)
"""

# ╔═╡ 03ba9918-9e19-11eb-3699-033157ee3bd1
md"""
It is critical to exactly match the declared C type with its declaration in Julia. Inconsistencies can cause code that works correctly on one system to fail or produce indeterminate results on a different system.
"""

# ╔═╡ 03ba9940-9e19-11eb-02e3-833ef4fbdac7
md"""
Note that no C header files are used anywhere in the process of calling C functions: you are responsible for making sure that your Julia types and call signatures accurately reflect those in the C header file.[^2]
"""

# ╔═╡ 03ba9972-9e19-11eb-10e0-c3571e5f3811
md"""
### [Automatic Type Conversion](@id automatic-type-conversion)
"""

# ╔═╡ 03ba999a-9e19-11eb-073f-954275b460a7
md"""
Julia automatically inserts calls to the [`Base.cconvert`](@ref) function to convert each argument to the specified type. For example, the following call:
"""

# ╔═╡ 03ba99b8-9e19-11eb-2e2f-f728269c846b
md"""
```julia
ccall((:foo, "libfoo"), Cvoid, (Int32, Float64), x, y)
```
"""

# ╔═╡ 03ba99d6-9e19-11eb-3267-89b031045100
md"""
will behave as if it were written like this:
"""

# ╔═╡ 03ba99ea-9e19-11eb-2458-a55daa3d1007
md"""
```julia
ccall((:foo, "libfoo"), Cvoid, (Int32, Float64),
      Base.unsafe_convert(Int32, Base.cconvert(Int32, x)),
      Base.unsafe_convert(Float64, Base.cconvert(Float64, y)))
```
"""

# ╔═╡ 03ba9a12-9e19-11eb-0ee4-896ab1070b70
md"""
[`Base.cconvert`](@ref) normally just calls [`convert`](@ref), but can be defined to return an arbitrary new object more appropriate for passing to C. This should be used to perform all allocations of memory that will be accessed by the C code. For example, this is used to convert an `Array` of objects (e.g. strings) to an array of pointers.
"""

# ╔═╡ 03ba9a3a-9e19-11eb-3953-21f73ce26e75
md"""
[`Base.unsafe_convert`](@ref) handles conversion to [`Ptr`](@ref) types. It is considered unsafe because converting an object to a native pointer can hide the object from the garbage collector, causing it to be freed prematurely.
"""

# ╔═╡ 03ba9a4e-9e19-11eb-2815-4f223883d18f
md"""
### Type Correspondences
"""

# ╔═╡ 03ba9a58-9e19-11eb-3444-bd24d968eaec
md"""
First, let's review some relevant Julia type terminology:
"""

# ╔═╡ 03ba9d62-9e19-11eb-04af-256f30b72ae3
md"""
| Syntax / Keyword        | Example                                    | Description                                                                                                                                                                                                                                                       |
|:----------------------- |:------------------------------------------ |:----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| `mutable struct`        | `BitSet`                                   | "Leaf Type" :: A group of related data that includes a type-tag, is managed by the Julia GC, and is defined by object-identity. The type parameters of a leaf type must be fully defined (no `TypeVars` are allowed) in order for the instance to be constructed. |
| `abstract type`         | `Any`, `AbstractArray{T, N}`, `Complex{T}` | "Super Type" :: A super-type (not a leaf-type) that cannot be instantiated, but can be used to describe a group of types.                                                                                                                                         |
| `T{A}`                  | `Vector{Int}`                              | "Type Parameter" :: A specialization of a type (typically used for dispatch or storage optimization).                                                                                                                                                             |
|                         |                                            | "TypeVar" :: The `T` in the type parameter declaration is referred to as a TypeVar (short for type variable).                                                                                                                                                     |
| `primitive type`        | `Int`, `Float64`                           | "Primitive Type" :: A type with no fields, but a size. It is stored and defined by-value.                                                                                                                                                                         |
| `struct`                | `Pair{Int, Int}`                           | "Struct" :: A type with all fields defined to be constant. It is defined by-value, and may be stored with a type-tag.                                                                                                                                             |
|                         | `ComplexF64` (`isbits`)                    | "Is-Bits"   :: A `primitive type`, or a `struct` type where all fields are other `isbits` types. It is defined by-value, and is stored without a type-tag.                                                                                                        |
| `struct ...; end`       | `nothing`                                  | "Singleton" :: a Leaf Type or Struct with no fields.                                                                                                                                                                                                              |
| `(...)` or `tuple(...)` | `(1, 2, 3)`                                | "Tuple" :: an immutable data-structure similar to an anonymous struct type, or a constant array. Represented as either an array or a struct.                                                                                                                      |
"""

# ╔═╡ 03ba9d78-9e19-11eb-3f16-61e2a2f0cc25
md"""
### [Bits Types](@id man-bits-types)
"""

# ╔═╡ 03ba9d8c-9e19-11eb-08a2-697f77427793
md"""
There are several special types to be aware of, as no other type can be defined to behave the same:
"""

# ╔═╡ 03ba9eca-9e19-11eb-3d39-c59392ac86be
md"""
  * `Float32`

    Exactly corresponds to the `float` type in C (or `REAL*4` in Fortran).
  * `Float64`

    Exactly corresponds to the `double` type in C (or `REAL*8` in Fortran).
  * `ComplexF32`

    Exactly corresponds to the `complex float` type in C (or `COMPLEX*8` in Fortran).
  * `ComplexF64`

    Exactly corresponds to the `complex double` type in C (or `COMPLEX*16` in Fortran).
  * `Signed`

    Exactly corresponds to the `signed` type annotation in C (or any `INTEGER` type in Fortran). Any Julia type that is not a subtype of [`Signed`](@ref) is assumed to be unsigned.
"""

# ╔═╡ 03ba9f08-9e19-11eb-3cd3-63efab1cbfca
md"""
  * `Ref{T}`

    Behaves like a `Ptr{T}` that can manage its memory via the Julia GC.
"""

# ╔═╡ 03baa020-9e19-11eb-0f38-f3041999a2b4
md"""
  * `Array{T,N}`

    When an array is passed to C as a `Ptr{T}` argument, it is not reinterpret-cast: Julia requires that the element type of the array matches `T`, and the address of the first element is passed.

    Therefore, if an `Array` contains data in the wrong format, it will have to be explicitly converted using a call such as `trunc(Int32, a)`.

    To pass an array `A` as a pointer of a different type *without* converting the data beforehand (for example, to pass a `Float64` array to a function that operates on uninterpreted bytes), you can declare the argument as `Ptr{Cvoid}`.

    If an array of eltype `Ptr{T}` is passed as a `Ptr{Ptr{T}}` argument, [`Base.cconvert`](@ref) will attempt to first make a null-terminated copy of the array with each element replaced by its [`Base.cconvert`](@ref) version. This allows, for example, passing an `argv` pointer array of type `Vector{String}` to an argument of type `Ptr{Ptr{Cchar}}`.
"""

# ╔═╡ 03baa03e-9e19-11eb-13bc-a7268d0ab61f
md"""
On all systems we currently support, basic C/C++ value types may be translated to Julia types as follows. Every C type also has a corresponding Julia type with the same name, prefixed by C. This can help when writing portable code (and remembering that an `int` in C is not the same as an `Int` in Julia).
"""

# ╔═╡ 03baa05c-9e19-11eb-2abd-332525c94728
md"""
**System Independent Types**
"""

# ╔═╡ 03baa4d0-9e19-11eb-189c-776c8484fe51
md"""
| C name                                                  | Fortran name             | Standard Julia Alias | Julia Base Type                                                                                             |
|:------------------------------------------------------- |:------------------------ |:-------------------- |:----------------------------------------------------------------------------------------------------------- |
| `unsigned char`                                         | `CHARACTER`              | `Cuchar`             | `UInt8`                                                                                                     |
| `bool` (_Bool in C99+)                                  |                          | `Cuchar`             | `UInt8`                                                                                                     |
| `short`                                                 | `INTEGER*2`, `LOGICAL*2` | `Cshort`             | `Int16`                                                                                                     |
| `unsigned short`                                        |                          | `Cushort`            | `UInt16`                                                                                                    |
| `int`, `BOOL` (C, typical)                              | `INTEGER*4`, `LOGICAL*4` | `Cint`               | `Int32`                                                                                                     |
| `unsigned int`                                          |                          | `Cuint`              | `UInt32`                                                                                                    |
| `long long`                                             | `INTEGER*8`, `LOGICAL*8` | `Clonglong`          | `Int64`                                                                                                     |
| `unsigned long long`                                    |                          | `Culonglong`         | `UInt64`                                                                                                    |
| `intmax_t`                                              |                          | `Cintmax_t`          | `Int64`                                                                                                     |
| `uintmax_t`                                             |                          | `Cuintmax_t`         | `UInt64`                                                                                                    |
| `float`                                                 | `REAL*4i`                | `Cfloat`             | `Float32`                                                                                                   |
| `double`                                                | `REAL*8`                 | `Cdouble`            | `Float64`                                                                                                   |
| `complex float`                                         | `COMPLEX*8`              | `ComplexF32`         | `Complex{Float32}`                                                                                          |
| `complex double`                                        | `COMPLEX*16`             | `ComplexF64`         | `Complex{Float64}`                                                                                          |
| `ptrdiff_t`                                             |                          | `Cptrdiff_t`         | `Int`                                                                                                       |
| `ssize_t`                                               |                          | `Cssize_t`           | `Int`                                                                                                       |
| `size_t`                                                |                          | `Csize_t`            | `UInt`                                                                                                      |
| `void`                                                  |                          |                      | `Cvoid`                                                                                                     |
| `void` and `[[noreturn]]` or `_Noreturn`                |                          |                      | `Union{}`                                                                                                   |
| `void*`                                                 |                          |                      | `Ptr{Cvoid}` (or similarly `Ref{Cvoid}`)                                                                    |
| `T*` (where T represents an appropriately defined type) |                          |                      | `Ref{T}` (T may be safely mutated only if T is an isbits type)                                              |
| `char*` (or `char[]`, e.g. a string)                    | `CHARACTER*N`            |                      | `Cstring` if NUL-terminated, or `Ptr{UInt8}` if not                                                         |
| `char**` (or `*char[]`)                                 |                          |                      | `Ptr{Ptr{UInt8}}`                                                                                           |
| `jl_value_t*` (any Julia Type)                          |                          |                      | `Any`                                                                                                       |
| `jl_value_t* const*` (a reference to a Julia value)     |                          |                      | `Ref{Any}` (const, since mutation would require a write barrier, which is not possible to insert correctly) |
| `va_arg`                                                |                          |                      | Not supported                                                                                               |
| `...` (variadic function specification)                 |                          |                      | `T...` (where `T` is one of the above types, when using the `ccall` function)                               |
| `...` (variadic function specification)                 |                          |                      | `; va_arg1::T, va_arg2::S, etc.` (only supported with `@ccall` macro)                                       |
"""

# ╔═╡ 03baa516-9e19-11eb-069e-13eea6eb58ba
md"""
The [`Cstring`](@ref) type is essentially a synonym for `Ptr{UInt8}`, except the conversion to `Cstring` throws an error if the Julia string contains any embedded NUL characters (which would cause the string to be silently truncated if the C routine treats NUL as the terminator).  If you are passing a `char*` to a C routine that does not assume NUL termination (e.g. because you pass an explicit string length), or if you know for certain that your Julia string does not contain NUL and want to skip the check, you can use `Ptr{UInt8}` as the argument type. `Cstring` can also be used as the [`ccall`](@ref) return type, but in that case it obviously does not introduce any extra checks and is only meant to improve readability of the call.
"""

# ╔═╡ 03baa52a-9e19-11eb-37e3-074447d12d6b
md"""
**System Dependent Types**
"""

# ╔═╡ 03baa5f2-9e19-11eb-0e40-57d7ddc8ac0f
md"""
| C name          | Standard Julia Alias | Julia Base Type                              |
|:--------------- |:-------------------- |:-------------------------------------------- |
| `char`          | `Cchar`              | `Int8` (x86, x86_64), `UInt8` (powerpc, arm) |
| `long`          | `Clong`              | `Int` (UNIX), `Int32` (Windows)              |
| `unsigned long` | `Culong`             | `UInt` (UNIX), `UInt32` (Windows)            |
| `wchar_t`       | `Cwchar_t`           | `Int32` (UNIX), `UInt16` (Windows)           |
"""

# ╔═╡ 03baa660-9e19-11eb-309f-e72dc24723ef
md"""
!!! note
    When calling Fortran, all inputs must be passed by pointers to heap- or stack-allocated values, so all type correspondences above should contain an additional `Ptr{..}` or `Ref{..}` wrapper around their type specification.
"""

# ╔═╡ 03baa6ce-9e19-11eb-0be4-b711c5ee1daa
md"""
!!! warning
    For string arguments (`char*`) the Julia type should be `Cstring` (if NUL- terminated data is expected), or either `Ptr{Cchar}` or `Ptr{UInt8}` otherwise (these two pointer types have the same effect), as described above, not `String`. Similarly, for array arguments (`T[]` or `T*`), the Julia type should again be `Ptr{T}`, not `Vector{T}`.
"""

# ╔═╡ 03baa708-9e19-11eb-37d7-fb40547c2989
md"""
!!! warning
    Julia's `Char` type is 32 bits, which is not the same as the wide character type (`wchar_t` or `wint_t`) on all platforms.
"""

# ╔═╡ 03baa76e-9e19-11eb-1e9a-a18960ed70c4
md"""
!!! warning
    A return type of `Union{}` means the function will not return, i.e., C++11 `[[noreturn]]` or C11 `_Noreturn` (e.g. `jl_throw` or `longjmp`). Do not use this for functions that return no value (`void`) but do return, use `Cvoid` instead.
"""

# ╔═╡ 03baa7d2-9e19-11eb-3c32-b3440aa38b36
md"""
!!! note
    For `wchar_t*` arguments, the Julia type should be [`Cwstring`](@ref) (if the C routine expects a NUL-terminated string), or `Ptr{Cwchar_t}` otherwise. Note also that UTF-8 string data in Julia is internally NUL-terminated, so it can be passed to C functions expecting NUL-terminated data without making a copy (but using the `Cwstring` type will cause an error to be thrown if the string itself contains NUL characters).
"""

# ╔═╡ 03baa868-9e19-11eb-1a8f-fbe79371a208
md"""
!!! note
    C functions that take an argument of type `char**` can be called by using a `Ptr{Ptr{UInt8}}` type within Julia. For example, C functions of the form:

    ```c
    int main(int argc, char **argv);
    ```

    can be called via the following Julia code:

    ```julia
    argv = [ "a.out", "arg1", "arg2" ]
    ccall(:main, Int32, (Int32, Ptr{Ptr{UInt8}}), length(argv), argv)
    ```
"""

# ╔═╡ 03baa946-9e19-11eb-3811-35a6a1d5f446
md"""
!!! note
    For Fortran functions taking variable length strings of type `character(len=*)` the string lengths are provided as *hidden arguments*. Type and position of these arguments in the list are compiler specific, where compiler vendors usually default to using `Csize_t` as type and append the hidden arguments at the end of the argument list. While this behaviour is fixed for some compilers (GNU), others *optionally* permit placing hidden arguments directly after the character argument (Intel, PGI). For example, Fortran subroutines of the form

    ```fortran
    subroutine test(str1, str2)
    character(len=*) :: str1,str2
    ```

    can be called via the following Julia code, where the lengths are appended

    ```julia
    str1 = "foo"
    str2 = "bar"
    ccall(:test, Cvoid, (Ptr{UInt8}, Ptr{UInt8}, Csize_t, Csize_t),
                        str1, str2, sizeof(str1), sizeof(str2))
    ```
"""

# ╔═╡ 03baa9c6-9e19-11eb-001a-3b2c14c9c13e
md"""
!!! warning
    Fortran compilers *may* also add other hidden arguments for pointers, assumed-shape (`:`) and assumed-size (`*`) arrays. Such behaviour can be avoided by using `ISO_C_BINDING` and including `bind(c)` in the definition of the subroutine, which is strongly recommended for interoperable code. In this case there will be no hidden arguments, at the cost of some language features (e.g. only `character(len=1)` will be permitted to pass strings).
"""

# ╔═╡ 03baa9f8-9e19-11eb-3792-35bd8aca52f5
md"""
!!! note
    A C function declared to return `Cvoid` will return the value `nothing` in Julia.
"""

# ╔═╡ 03baaa0c-9e19-11eb-3e1e-49f14ee1893b
md"""
### Struct Type Correspondences
"""

# ╔═╡ 03baaa34-9e19-11eb-141e-978b1ac332d4
md"""
Composite types such as `struct` in C or `TYPE` in Fortran90 (or `STRUCTURE` / `RECORD` in some variants of F77), can be mirrored in Julia by creating a `struct` definition with the same field layout.
"""

# ╔═╡ 03baaa52-9e19-11eb-2065-157c58ec8517
md"""
When used recursively, `isbits` types are stored inline. All other types are stored as a pointer to the data. When mirroring a struct used by-value inside another struct in C, it is imperative that you do not attempt to manually copy the fields over, as this will not preserve the correct field alignment. Instead, declare an `isbits` struct type and use that instead. Unnamed structs are not possible in the translation to Julia.
"""

# ╔═╡ 03baaa70-9e19-11eb-1459-815771b5f75a
md"""
Packed structs and union declarations are not supported by Julia.
"""

# ╔═╡ 03baaa84-9e19-11eb-3819-f379590944ae
md"""
You can get an approximation of a `union` if you know, a priori, the field that will have the greatest size (potentially including padding). When translating your fields to Julia, declare the Julia field to be only of that type.
"""

# ╔═╡ 03baaaa2-9e19-11eb-05bd-87024cf0076d
md"""
Arrays of parameters can be expressed with `NTuple`.  For example, the struct in C notation written as
"""

# ╔═╡ 03baab92-9e19-11eb-1cac-b39717648548
struct B {

# ╔═╡ 03baabb2-9e19-11eb-1bdb-f38fdc115de6
md"""
can be written in Julia as
"""

# ╔═╡ 03baabce-9e19-11eb-2d79-b769cc5f99d1
md"""
```julia
struct B
    A::NTuple{3, Cint}
end

b_a_2 = B.A[3]  # note the difference in indexing (1-based in Julia, 0-based in C)
```
"""

# ╔═╡ 03baabec-9e19-11eb-1d6d-e974b31bbbf8
md"""
Arrays of unknown size (C99-compliant variable length structs specified by `[]` or `[0]`) are not directly supported. Often the best way to deal with these is to deal with the byte offsets directly. For example, if a C library declared a proper string type and returned a pointer to it:
"""

# ╔═╡ 03baac82-9e19-11eb-1164-279bdcfdb459
struct String {

# ╔═╡ 03baac96-9e19-11eb-14cd-43d1cfccbb4b
md"""
In Julia, we can access the parts independently to make a copy of that string:
"""

# ╔═╡ 03baacb4-9e19-11eb-2407-7f2eb587e5d7
md"""
```julia
str = from_c::Ptr{Cvoid}
len = unsafe_load(Ptr{Cint}(str))
unsafe_string(str + Core.sizeof(Cint), len)
```
"""

# ╔═╡ 03baacbe-9e19-11eb-27f0-695203ab75ec
md"""
### Type Parameters
"""

# ╔═╡ 03baace6-9e19-11eb-32d4-c5542354477f
md"""
The type arguments to `ccall` and `@cfunction` are evaluated statically, when the method containing the usage is defined. They therefore must take the form of a literal tuple, not a variable, and cannot reference local variables.
"""

# ╔═╡ 03baacf0-9e19-11eb-1fe7-49252ec9e245
md"""
This may sound like a strange restriction, but remember that since C is not a dynamic language like Julia, its functions can only accept argument types with a statically-known, fixed signature.
"""

# ╔═╡ 03baad1a-9e19-11eb-0351-b30e11cd9f71
md"""
However, while the type layout must be known statically to compute the intended C ABI, the static parameters of the function are considered to be part of this static environment. The static parameters of the function may be used as type parameters in the call signature, as long as they don't affect the layout of the type. For example, `f(x::T) where {T} = ccall(:valid, Ptr{T}, (Ptr{T},), x)` is valid, since `Ptr` is always a word-size primitive type. But, `g(x::T) where {T} = ccall(:notvalid, T, (T,), x)` is not valid, since the type layout of `T` is not known statically.
"""

# ╔═╡ 03baad36-9e19-11eb-39ab-099ef3386d65
md"""
### SIMD Values
"""

# ╔═╡ 03baad4c-9e19-11eb-3086-81a0c908e780
md"""
Note: This feature is currently implemented on 64-bit x86 and AArch64 platforms only.
"""

# ╔═╡ 03baad5e-9e19-11eb-328d-81dc589ba23a
md"""
If a C/C++ routine has an argument or return value that is a native SIMD type, the corresponding Julia type is a homogeneous tuple of `VecElement` that naturally maps to the SIMD type.  Specifically:
"""

# ╔═╡ 03baae30-9e19-11eb-0f64-456e331f0e76
md"""
>   * The tuple must be the same size as the SIMD type. For example, a tuple representing an `__m128` on x86 must have a size of 16 bytes.
>   * The element type of the tuple must be an instance of `VecElement{T}` where `T` is a primitive type that is 1, 2, 4 or 8 bytes.
"""

# ╔═╡ 03baae44-9e19-11eb-2d4a-c9708df3996a
md"""
For instance, consider this C routine that uses AVX intrinsics:
"""

# ╔═╡ 03baaf66-9e19-11eb-0d1b-7b19cb35500d
#include <immintrin.h>

__m256 dist

# ╔═╡ 03baaf84-9e19-11eb-13a6-b37fa9f730af
md"""
The following Julia code calls `dist` using `ccall`:
"""

# ╔═╡ 03baafb8-9e19-11eb-0cff-3d3154433bdf
md"""
```julia
const m256 = NTuple{8, VecElement{Float32}}

a = m256(ntuple(i -> VecElement(sin(Float32(i))), 8))
b = m256(ntuple(i -> VecElement(cos(Float32(i))), 8))

function call_dist(a::m256, b::m256)
    ccall((:dist, "libdist"), m256, (m256, m256), a, b)
end

println(call_dist(a,b))
```
"""

# ╔═╡ 03baafca-9e19-11eb-3049-8dacb9ba32a0
md"""
The host machine must have the requisite SIMD registers.  For example, the code above will not work on hosts without AVX support.
"""

# ╔═╡ 03baafea-9e19-11eb-2f24-b120cb394903
md"""
### Memory Ownership
"""

# ╔═╡ 03bab006-9e19-11eb-1a96-9f7cdf48b886
md"""
**malloc/free**
"""

# ╔═╡ 03bab02e-9e19-11eb-3504-f5dcb4149295
md"""
Memory allocation and deallocation of such objects must be handled by calls to the appropriate cleanup routines in the libraries being used, just like in any C program. Do not try to free an object received from a C library with [`Libc.free`](@ref) in Julia, as this may result in the `free` function being called via the wrong library and cause the process to abort. The reverse (passing an object allocated in Julia to be freed by an external library) is equally invalid.
"""

# ╔═╡ 03bab038-9e19-11eb-2a8f-1bca1b253edc
md"""
### When to use T, Ptr{T} and Ref{T}
"""

# ╔═╡ 03bab07c-9e19-11eb-1bfc-219e1e88bb55
md"""
In Julia code wrapping calls to external C routines, ordinary (non-pointer) data should be declared to be of type `T` inside the [`ccall`](@ref), as they are passed by value.  For C code accepting pointers, [`Ref{T}`](@ref) should generally be used for the types of input arguments, allowing the use of pointers to memory managed by either Julia or C through the implicit call to [`Base.cconvert`](@ref). In contrast, pointers returned by the C function called should be declared to be of output type [`Ptr{T}`](@ref), reflecting that the memory pointed to is managed by C only. Pointers contained in C structs should be represented as fields of type `Ptr{T}` within the corresponding Julia struct types designed to mimic the internal structure of corresponding C structs.
"""

# ╔═╡ 03bab09c-9e19-11eb-08ae-85f677864a36
md"""
In Julia code wrapping calls to external Fortran routines, all input arguments should be declared as of type `Ref{T}`, as Fortran passes all variables by pointers to memory locations. The return type should either be `Cvoid` for Fortran subroutines, or a `T` for Fortran functions returning the type `T`.
"""

# ╔═╡ 03bab0ae-9e19-11eb-0e6f-3f71211fad89
md"""
## Mapping C Functions to Julia
"""

# ╔═╡ 03bab0d8-9e19-11eb-295c-23137afb31bf
md"""
### `ccall` / `@cfunction` argument translation guide
"""

# ╔═╡ 03bab100-9e19-11eb-37ed-51662fabb119
md"""
For translating a C argument list to Julia:
"""

# ╔═╡ 03bab678-9e19-11eb-0a11-9dcd4572f90e
md"""
  * `T`, where `T` is one of the primitive types: `char`, `int`, `long`, `short`, `float`, `double`, `complex`, `enum` or any of their `typedef` equivalents

      * `T`, where `T` is an equivalent Julia Bits Type (per the table above)
      * if `T` is an `enum`, the argument type should be equivalent to `Cint` or `Cuint`
      * argument value will be copied (passed by value)
  * `struct T` (including typedef to a struct)

      * `T`, where `T` is a Julia leaf type
      * argument value will be copied (passed by value)
  * `void*`

      * depends on how this parameter is used, first translate this to the intended pointer type, then determine the Julia equivalent using the remaining rules in this list
      * this argument may be declared as `Ptr{Cvoid}`, if it really is just an unknown pointer
  * `jl_value_t*`

      * `Any`
      * argument value must be a valid Julia object
  * `jl_value_t* const*`

      * `Ref{Any}`
      * argument list must be a valid Julia object (or `C_NULL`)
      * cannot be used for an output parameter, unless the user is able to manage to separate arrange for the object to be GC-preserved
  * `T*`

      * `Ref{T}`, where `T` is the Julia type corresponding to `T`
      * argument value will be copied if it is an `inlinealloc` type (which includes `isbits` otherwise, the value must be a valid Julia object
  * `T (*)(...)` (e.g. a pointer to a function)

      * `Ptr{Cvoid}` (you may need to use [`@cfunction`](@ref) explicitly to create this pointer)
  * `...` (e.g. a vararg)

      * [for `ccall`]: `T...`, where `T` is the single Julia type of all remaining arguments
      * [for `@ccall`]: `; va_arg1::T, va_arg2::S, etc`, where `T` and `S` are the Julia type (i.e. separate the regular arguments from varargs with a `;`)
      * currently unsupported by `@cfunction`
  * `va_arg`

      * not supported by `ccall` or `@cfunction`
"""

# ╔═╡ 03bab696-9e19-11eb-22cd-09289bb5cea2
md"""
### `ccall` / `@cfunction` return type translation guide
"""

# ╔═╡ 03bab6aa-9e19-11eb-0d7d-e910c94559cd
md"""
For translating a C return type to Julia:
"""

# ╔═╡ 03babb1e-9e19-11eb-0600-55e73cfeccab
md"""
  * `void`

      * `Cvoid` (this will return the singleton instance `nothing::Cvoid`)
  * `T`, where `T` is one of the primitive types: `char`, `int`, `long`, `short`, `float`, `double`, `complex`, `enum` or any of their `typedef` equivalents

      * `T`, where `T` is an equivalent Julia Bits Type (per the table above)
      * if `T` is an `enum`, the argument type should be equivalent to `Cint` or `Cuint`
      * argument value will be copied (returned by-value)
  * `struct T` (including typedef to a struct)

      * `T`, where `T` is a Julia Leaf Type
      * argument value will be copied (returned by-value)
  * `void*`

      * depends on how this parameter is used, first translate this to the intended pointer type, then determine the Julia equivalent using the remaining rules in this list
      * this argument may be declared as `Ptr{Cvoid}`, if it really is just an unknown pointer
  * `jl_value_t*`

      * `Any`
      * argument value must be a valid Julia object
  * `jl_value_t**`

      * `Ptr{Any}` (`Ref{Any}` is invalid as a return type)
  * `T*`

      * If the memory is already owned by Julia, or is an `isbits` type, and is known to be non-null:

          * `Ref{T}`, where `T` is the Julia type corresponding to `T`
          * a return type of `Ref{Any}` is invalid, it should either be `Any` (corresponding to `jl_value_t*`) or `Ptr{Any}` (corresponding to `jl_value_t**`)
          * C **MUST NOT** modify the memory returned via `Ref{T}` if `T` is an `isbits` type
      * If the memory is owned by C:

          * `Ptr{T}`, where `T` is the Julia type corresponding to `T`
  * `T (*)(...)` (e.g. a pointer to a function)

      * `Ptr{Cvoid}` (you may need to use [`@cfunction`](@ref) explicitly to create this pointer)
"""

# ╔═╡ 03babb32-9e19-11eb-200c-7960e1c060b5
md"""
### Passing Pointers for Modifying Inputs
"""

# ╔═╡ 03babb58-9e19-11eb-3398-f3aa15df6629
md"""
Because C doesn't support multiple return values, often C functions will take pointers to data that the function will modify. To accomplish this within a [`ccall`](@ref), you need to first encapsulate the value inside a [`Ref{T}`](@ref) of the appropriate type. When you pass this `Ref` object as an argument, Julia will automatically pass a C pointer to the encapsulated data:
"""

# ╔═╡ 03babb8a-9e19-11eb-15e8-af693362adde
md"""
```julia
width = Ref{Cint}(0)
range = Ref{Cfloat}(0)
ccall(:foo, Cvoid, (Ref{Cint}, Ref{Cfloat}), width, range)
```
"""

# ╔═╡ 03babbb4-9e19-11eb-29ee-fb5c8b460f40
md"""
Upon return, the contents of `width` and `range` can be retrieved (if they were changed by `foo`) by `width[]` and `range[]`; that is, they act like zero-dimensional arrays.
"""

# ╔═╡ 03babbc8-9e19-11eb-1dba-bfad8a17d3cc
md"""
## C Wrapper Examples
"""

# ╔═╡ 03babbdc-9e19-11eb-12b5-e906af5496fb
md"""
Let's start with a simple example of a C wrapper that returns a `Ptr` type:
"""

# ╔═╡ 03babbfa-9e19-11eb-113e-755f1186864b
md"""
```julia
mutable struct gsl_permutation
end

# The corresponding C signature is
#     gsl_permutation * gsl_permutation_alloc (size_t n);
function permutation_alloc(n::Integer)
    output_ptr = ccall(
        (:gsl_permutation_alloc, :libgsl), # name of C function and library
        Ptr{gsl_permutation},              # output type
        (Csize_t,),                        # tuple of input types
        n                                  # name of Julia variable to pass in
    )
    if output_ptr == C_NULL # Could not allocate memory
        throw(OutOfMemoryError())
    end
    return output_ptr
end
```
"""

# ╔═╡ 03babc36-9e19-11eb-14c9-5fadff63a682
md"""
The [GNU Scientific Library](https://www.gnu.org/software/gsl/) (here assumed to be accessible through `:libgsl`) defines an opaque pointer, `gsl_permutation *`, as the return type of the C function `gsl_permutation_alloc`. As user code never has to look inside the `gsl_permutation` struct, the corresponding Julia wrapper simply needs a new type declaration, `gsl_permutation`, that has no internal fields and whose sole purpose is to be placed in the type parameter of a `Ptr` type.  The return type of the [`ccall`](@ref) is declared as `Ptr{gsl_permutation}`, since the memory allocated and pointed to by `output_ptr` is controlled by C.
"""

# ╔═╡ 03babc68-9e19-11eb-0b33-93d0aafd36f5
md"""
The input `n` is passed by value, and so the function's input signature is simply declared as `(Csize_t,)` without any `Ref` or `Ptr` necessary. (If the wrapper was calling a Fortran function instead, the corresponding function input signature would instead be `(Ref{Csize_t},)`, since Fortran variables are passed by pointers.) Furthermore, `n` can be any type that is convertible to a `Csize_t` integer; the [`ccall`](@ref) implicitly calls [`Base.cconvert(Csize_t, n)`](@ref).
"""

# ╔═╡ 03babc7c-9e19-11eb-2e1d-fd56c431124e
md"""
Here is a second example wrapping the corresponding destructor:
"""

# ╔═╡ 03babc9a-9e19-11eb-05f7-414f39bfdcf3
md"""
```julia
# The corresponding C signature is
#     void gsl_permutation_free (gsl_permutation * p);
function permutation_free(p::Ref{gsl_permutation})
    ccall(
        (:gsl_permutation_free, :libgsl), # name of C function and library
        Cvoid,                             # output type
        (Ref{gsl_permutation},),          # tuple of input types
        p                                 # name of Julia variable to pass in
    )
end
```
"""

# ╔═╡ 03babcc0-9e19-11eb-1972-73128532342e
md"""
Here, the input `p` is declared to be of type `Ref{gsl_permutation}`, meaning that the memory that `p` points to may be managed by Julia or by C. A pointer to memory allocated by C should be of type `Ptr{gsl_permutation}`, but it is convertible using [`Base.cconvert`](@ref) and therefore
"""

# ╔═╡ 03babce0-9e19-11eb-3352-1b3d38ef7dfa
md"""
Now if you look closely enough at this example, you may notice that it is incorrect, given our explanation above of preferred declaration types. Do you see it? The function we are calling is going to free the memory. This type of operation cannot be given a Julia object (it will crash or cause memory corruption). Therefore, it may be preferable to declare the `p` type as `Ptr{gsl_permutation }`, to make it harder for the user to mistakenly pass another sort of object there than one obtained via `gsl_permutation_alloc`.
"""

# ╔═╡ 03babcfe-9e19-11eb-348a-65750ec19005
md"""
If the C wrapper never expects the user to pass pointers to memory managed by Julia, then using `p::Ptr{gsl_permutation}` for the method signature of the wrapper and similarly in the [`ccall`](@ref) is also acceptable.
"""

# ╔═╡ 03babd1c-9e19-11eb-319e-9bf24702cf30
md"""
Here is a third example passing Julia arrays:
"""

# ╔═╡ 03babd30-9e19-11eb-01b3-81eed4530fda
md"""
```julia
# The corresponding C signature is
#    int gsl_sf_bessel_Jn_array (int nmin, int nmax, double x,
#                                double result_array[])
function sf_bessel_Jn_array(nmin::Integer, nmax::Integer, x::Real)
    if nmax < nmin
        throw(DomainError())
    end
    result_array = Vector{Cdouble}(undef, nmax - nmin + 1)
    errorcode = ccall(
        (:gsl_sf_bessel_Jn_array, :libgsl), # name of C function and library
        Cint,                               # output type
        (Cint, Cint, Cdouble, Ref{Cdouble}),# tuple of input types
        nmin, nmax, x, result_array         # names of Julia variables to pass in
    )
    if errorcode != 0
        error("GSL error code $errorcode")
    end
    return result_array
end
```
"""

# ╔═╡ 03babd4e-9e19-11eb-3565-6749b7cb5f5e
md"""
The C function wrapped returns an integer error code; the results of the actual evaluation of the Bessel J function populate the Julia array `result_array`. This variable is declared as a `Ref{Cdouble}`, since its memory is allocated and managed by Julia. The implicit call to [`Base.cconvert(Ref{Cdouble}, result_array)`](@ref) unpacks the Julia pointer to a Julia array data structure into a form understandable by C.
"""

# ╔═╡ 03babd64-9e19-11eb-12bb-91c882f06a12
md"""
## Fortran Wrapper Example
"""

# ╔═╡ 03babd8a-9e19-11eb-1bfe-cb19f9fd3ed7
md"""
The following example utilizes ccall to call a function in a common Fortran library (libBLAS) to computes a dot product. Notice that the argument mapping is a bit different here than above, as we need to map from Julia to Fortran.  On every argument type, we specify `Ref` or `Ptr`. This mangling convention may be specific to your fortran compiler and operating system, and is likely undocumented. However, wrapping each in a `Ref` (or `Ptr`, where equivalent) is a frequent requirement of Fortran compiler implementations:
"""

# ╔═╡ 03babd9e-9e19-11eb-379d-1bf4f3b0b5bd
md"""
```julia
function compute_dot(DX::Vector{Float64}, DY::Vector{Float64})
    @assert length(DX) == length(DY)
    n = length(DX)
    incx = incy = 1
    product = ccall((:ddot_, "libLAPACK"),
                    Float64,
                    (Ref{Int32}, Ptr{Float64}, Ref{Int32}, Ptr{Float64}, Ref{Int32}),
                    n, DX, incx, DY, incy)
    return product
end
```
"""

# ╔═╡ 03babdb2-9e19-11eb-1339-632b6905c15b
md"""
## Garbage Collection Safety
"""

# ╔═╡ 03babdee-9e19-11eb-0088-61995c334b94
md"""
When passing data to a [`ccall`](@ref), it is best to avoid using the [`pointer`](@ref) function. Instead define a convert method and pass the variables directly to the [`ccall`](@ref). [`ccall`](@ref) automatically arranges that all of its arguments will be preserved from garbage collection until the call returns. If a C API will store a reference to memory allocated by Julia, after the [`ccall`](@ref) returns, you must ensure that the object remains visible to the garbage collector. The suggested way to do this is to make a global variable of type `Array{Ref,1}` to hold these values, until the C library notifies you that it is finished with them.
"""

# ╔═╡ 03babe20-9e19-11eb-21f0-ab0ed4d80030
md"""
Whenever you have created a pointer to Julia data, you must ensure the original data exists until you have finished using the pointer. Many methods in Julia such as [`unsafe_load`](@ref) and [`String`](@ref) make copies of data instead of taking ownership of the buffer, so that it is safe to free (or alter) the original data without affecting Julia. A notable exception is [`unsafe_wrap`](@ref) which, for performance reasons, shares (or can be told to take ownership of) the underlying buffer.
"""

# ╔═╡ 03babe3e-9e19-11eb-0e2f-63cb749761f7
md"""
The garbage collector does not guarantee any order of finalization. That is, if `a` contained a reference to `b` and both `a` and `b` are due for garbage collection, there is no guarantee that `b` would be finalized after `a`. If proper finalization of `a` depends on `b` being valid, it must be handled in other ways.
"""

# ╔═╡ 03babe5a-9e19-11eb-377f-2b892ec0853b
md"""
## Non-constant Function Specifications
"""

# ╔═╡ 03babe70-9e19-11eb-0617-8d4c589d772d
md"""
In some cases, the exact name or path of the needed library is not known in advance and must be computed at run time. To handle such cases, the library component of a `(name, library)` specification can be a function call, e.g. `(:dgemm_, find_blas())`. The call expression will be executed when the `ccall` itself is executed. However, it is assumed that the library location does not change once it is determined, so the result of the call can be cached and reused. Therefore, the number of times the expression executes is unspecified, and returning different values for multiple calls results in unspecified behavior.
"""

# ╔═╡ 03babe84-9e19-11eb-3211-f96ae4249056
md"""
If even more flexibility is needed, it is possible to use computed values as function names by staging through [`eval`](@ref) as follows:
"""

# ╔═╡ 03bac2e4-9e19-11eb-3617-b14a594af991
@eval ccall(($(string("a", "b")), "lib"), ...

# ╔═╡ 03bac336-9e19-11eb-19d8-1df6845cda0a
md"""
This expression constructs a name using `string`, then substitutes this name into a new [`ccall`](@ref) expression, which is then evaluated. Keep in mind that `eval` only operates at the top level, so within this expression local variables will not be available (unless their values are substituted with `$`). For this reason, `eval` is typically only used to form top-level definitions, for example when wrapping libraries that contain many similar functions. A similar example can be constructed for [`@cfunction`](@ref).
"""

# ╔═╡ 03bac348-9e19-11eb-3dda-6dbb1f46f9f8
md"""
However, doing this will also be very slow and leak memory, so you should usually avoid this and instead keep reading. The next section discusses how to use indirect calls to efficiently achieve a similar effect.
"""

# ╔═╡ 03bac35c-9e19-11eb-07a6-b5e65c59f88f
md"""
## Indirect Calls
"""

# ╔═╡ 03bac384-9e19-11eb-0d14-ebd342700eb9
md"""
The first argument to [`ccall`](@ref) can also be an expression evaluated at run time. In this case, the expression must evaluate to a `Ptr`, which will be used as the address of the native function to call. This behavior occurs when the first [`ccall`](@ref) argument contains references to non-constants, such as local variables, function arguments, or non-constant globals.
"""

# ╔═╡ 03bac396-9e19-11eb-0157-f7588ae5895a
md"""
For example, you might look up the function via `dlsym`, then cache it in a shared reference for that session. For example:
"""

# ╔═╡ 03bac3b6-9e19-11eb-1df4-4ba219099721
md"""
```julia
macro dlsym(func, lib)
    z = Ref{Ptr{Cvoid}}(C_NULL)
    quote
        let zlocal = $z[]
            if zlocal == C_NULL
                zlocal = dlsym($(esc(lib))::Ptr{Cvoid}, $(esc(func)))::Ptr{Cvoid}
                $z[] = $zlocal
            end
            zlocal
        end
    end
end

mylibvar = Libdl.dlopen("mylib")
ccall(@dlsym("myfunc", mylibvar), Cvoid, ())
```
"""

# ╔═╡ 03bac3c8-9e19-11eb-3340-03746aaeacc3
md"""
## Closure cfunctions
"""

# ╔═╡ 03bac3f2-9e19-11eb-3ba7-23b663f4755f
md"""
The first argument to [`@cfunction`](@ref) can be marked with a `$`, in which case the return value will instead be a `struct CFunction` which closes over the argument. You must ensure that this return object is kept alive until all uses of it are done. The contents and code at the cfunction pointer will be erased via a [`finalizer`](@ref) when this reference is dropped and atexit. This is not usually needed, since this functionality is not present in C, but can be useful for dealing with ill-designed APIs which don't provide a separate closure environment parameter.
"""

# ╔═╡ 03bac410-9e19-11eb-021f-ab6cfc245557
md"""
```julia
function qsort(a::Vector{T}, cmp) where T
    isbits(T) || throw(ArgumentError("this method can only qsort isbits arrays"))
    callback = @cfunction $cmp Cint (Ref{T}, Ref{T})
    # Here, `callback` isa Base.CFunction, which will be converted to Ptr{Cvoid}
    # (and protected against finalization) by the ccall
    ccall(:qsort, Cvoid, (Ptr{T}, Csize_t, Csize_t, Ptr{Cvoid}),
        a, length(a), Base.elsize(a), callback)
    # We could instead use:
    #    GC.@preserve callback begin
    #        use(Base.unsafe_convert(Ptr{Cvoid}, callback))
    #    end
    # if we needed to use it outside of a `ccall`
    return a
end
```
"""

# ╔═╡ 03bac474-9e19-11eb-0d5e-b9382215cc92
md"""
!!! note
    Closure [`@cfunction`](@ref) rely on LLVM trampolines, which are not available on all platforms (for example ARM and PowerPC).
"""

# ╔═╡ 03bac47e-9e19-11eb-2243-874000b3115f
md"""
## Closing a Library
"""

# ╔═╡ 03bac49e-9e19-11eb-194a-754e692c9ac1
md"""
It is sometimes useful to close (unload) a library so that it can be reloaded. For instance, when developing C code for use with Julia, one may need to compile, call the C code from Julia, then close the library, make an edit, recompile, and load in the new changes. One can either restart Julia or use the `Libdl` functions to manage the library explicitly, such as:
"""

# ╔═╡ 03bac4c4-9e19-11eb-0d9c-252e42d3f354
md"""
```julia
lib = Libdl.dlopen("./my_lib.so") # Open the library explicitly.
sym = Libdl.dlsym(lib, :my_fcn)   # Get a symbol for the function to call.
ccall(sym, ...) # Use the pointer `sym` instead of the (symbol, library) tuple (remaining arguments are the same).
Libdl.dlclose(lib) # Close the library explicitly.
```
"""

# ╔═╡ 03bac4d8-9e19-11eb-03be-bdf4637400b6
md"""
Note that when using `ccall` with the tuple input (e.g., `ccall((:my_fcn, "./my_lib.so"), ...)`), the library is opened implicitly and it may not be explicitly closed.
"""

# ╔═╡ 03bac4ec-9e19-11eb-1f9d-a35e73f2665a
md"""
## Calling Convention
"""

# ╔═╡ 03bac51e-9e19-11eb-0cce-2b39de108e4e
md"""
The second argument to [`ccall`](@ref) can optionally be a calling convention specifier (immediately preceding return type). Without any specifier, the platform-default C calling convention is used. Other supported conventions are: `stdcall`, `cdecl`, `fastcall`, and `thiscall` (no-op on 64-bit Windows). For example (from `base/libc.jl`) we see the same `gethostname`[`ccall`](@ref) as above, but with the correct signature for Windows:
"""

# ╔═╡ 03bac530-9e19-11eb-0f06-031372390425
md"""
```julia
hn = Vector{UInt8}(undef, 256)
err = ccall(:gethostname, stdcall, Int32, (Ptr{UInt8}, UInt32), hn, length(hn))
```
"""

# ╔═╡ 03bac546-9e19-11eb-3c46-c36fa3d2ea10
md"""
For more information, please see the [LLVM Language Reference](http://llvm.org/docs/LangRef.html#calling-conventions).
"""

# ╔═╡ 03bac564-9e19-11eb-3101-ed594ae0fbf0
md"""
There is one additional special calling convention [`llvmcall`](@ref Base.llvmcall), which allows inserting calls to LLVM intrinsics directly. This can be especially useful when targeting unusual platforms such as GPGPUs. For example, for [CUDA](http://llvm.org/docs/NVPTXUsage.html), we need to be able to read the thread index:
"""

# ╔═╡ 03bac582-9e19-11eb-313f-ad01bf457021
md"""
```julia
ccall("llvm.nvvm.read.ptx.sreg.tid.x", llvmcall, Int32, ())
```
"""

# ╔═╡ 03bac596-9e19-11eb-208c-97071ffb3c6e
md"""
As with any `ccall`, it is essential to get the argument signature exactly correct. Also, note that there is no compatibility layer that ensures the intrinsic makes sense and works on the current target, unlike the equivalent Julia functions exposed by `Core.Intrinsics`.
"""

# ╔═╡ 03bac5aa-9e19-11eb-1bc8-576c95af6988
md"""
## Accessing Global Variables
"""

# ╔═╡ 03bac5d4-9e19-11eb-1f88-394fbdc5573f
md"""
Global variables exported by native libraries can be accessed by name using the [`cglobal`](@ref) function. The arguments to [`cglobal`](@ref) are a symbol specification identical to that used by [`ccall`](@ref), and a type describing the value stored in the variable:
"""

# ╔═╡ 03bac82a-9e19-11eb-3302-e79f86fbd4a6
cglobal((:errno, :libc), Int32)

# ╔═╡ 03bac848-9e19-11eb-07f8-734babd97055
md"""
The result is a pointer giving the address of the value. The value can be manipulated through this pointer using [`unsafe_load`](@ref) and [`unsafe_store!`](@ref).
"""

# ╔═╡ 03bac8c0-9e19-11eb-1330-c7da97dba148
md"""
!!! note
    This `errno` symbol may not be found in a library named "libc", as this is an implementation detail of your system compiler. Typically standard library symbols should be accessed just by name, allowing the compiler to fill in the correct one. Also, however, the `errno` symbol shown in this example is special in most compilers, and so the value seen here is probably not what you expect or want. Compiling the equivalent code in C on any multi-threaded-capable system would typically actually call a different function (via macro preprocessor overloading), and may give a different result than the legacy value printed here.
"""

# ╔═╡ 03bac8e8-9e19-11eb-1fe9-b78a2a1f7335
md"""
## Accessing Data through a Pointer
"""

# ╔═╡ 03bac8fc-9e19-11eb-250d-2df802d83e9c
md"""
The following methods are described as "unsafe" because a bad pointer or type declaration can cause Julia to terminate abruptly.
"""

# ╔═╡ 03bac924-9e19-11eb-250a-a7c19535459f
md"""
Given a `Ptr{T}`, the contents of type `T` can generally be copied from the referenced memory into a Julia object using `unsafe_load(ptr, [index])`. The index argument is optional (default is 1), and follows the Julia-convention of 1-based indexing. This function is intentionally similar to the behavior of [`getindex`](@ref) and [`setindex!`](@ref) (e.g. `[]` access syntax).
"""

# ╔═╡ 03bac936-9e19-11eb-1e44-ed9377e9d329
md"""
The return value will be a new object initialized to contain a copy of the contents of the referenced memory. The referenced memory can safely be freed or released.
"""

# ╔═╡ 03bac974-9e19-11eb-1649-cd4d30d86aa9
md"""
If `T` is `Any`, then the memory is assumed to contain a reference to a Julia object (a `jl_value_t*`), the result will be a reference to this object, and the object will not be copied. You must be careful in this case to ensure that the object was always visible to the garbage collector (pointers do not count, but the new reference does) to ensure the memory is not prematurely freed. Note that if the object was not originally allocated by Julia, the new object will never be finalized by Julia's garbage collector.  If the `Ptr` itself is actually a `jl_value_t*`, it can be converted back to a Julia object reference by [`unsafe_pointer_to_objref(ptr)`](@ref). (Julia values `v` can be converted to `jl_value_t*` pointers, as `Ptr{Cvoid}`, by calling [`pointer_from_objref(v)`](@ref).)
"""

# ╔═╡ 03bac988-9e19-11eb-3a2d-454bbd82faa1
md"""
The reverse operation (writing data to a `Ptr{T}`), can be performed using [`unsafe_store!(ptr, value, [index])`](@ref). Currently, this is only supported for primitive types or other pointer-free (`isbits`) immutable struct types.
"""

# ╔═╡ 03bac99c-9e19-11eb-2e73-5b018465d5fc
md"""
Any operation that throws an error is probably currently unimplemented and should be posted as a bug so that it can be resolved.
"""

# ╔═╡ 03bac9c4-9e19-11eb-1be4-252bf5f46b49
md"""
If the pointer of interest is a plain-data array (primitive type or immutable struct), the function [`unsafe_wrap(Array, ptr,dims, own = false)`](@ref) may be more useful. The final parameter should be true if Julia should "take ownership" of the underlying buffer and call `free(ptr)` when the returned `Array` object is finalized.  If the `own` parameter is omitted or false, the caller must ensure the buffer remains in existence until all access is complete.
"""

# ╔═╡ 03bac9ec-9e19-11eb-232e-8152671fa243
md"""
Arithmetic on the `Ptr` type in Julia (e.g. using `+`) does not behave the same as C's pointer arithmetic. Adding an integer to a `Ptr` in Julia always moves the pointer by some number of *bytes*, not elements. This way, the address values obtained from pointer arithmetic do not depend on the element types of pointers.
"""

# ╔═╡ 03baca00-9e19-11eb-3bb6-7563249ae6ff
md"""
## Thread-safety
"""

# ╔═╡ 03baca1e-9e19-11eb-23f4-61636b8e0f1b
md"""
Some C libraries execute their callbacks from a different thread, and since Julia isn't thread-safe you'll need to take some extra precautions. In particular, you'll need to set up a two-layered system: the C callback should only *schedule* (via Julia's event loop) the execution of your "real" callback. To do this, create an [`AsyncCondition`](@ref Base.AsyncCondition) object and [`wait`](@ref) on it:
"""

# ╔═╡ 03baca3e-9e19-11eb-0895-e52e18e8e687
md"""
```julia
cond = Base.AsyncCondition()
wait(cond)
```
"""

# ╔═╡ 03baca64-9e19-11eb-3b5b-1fe2b5a5bff9
md"""
The callback you pass to C should only execute a [`ccall`](@ref) to `:uv_async_send`, passing `cond.handle` as the argument, taking care to avoid any allocations or other interactions with the Julia runtime.
"""

# ╔═╡ 03baca78-9e19-11eb-1e5b-1710804e0637
md"""
Note that events may be coalesced, so multiple calls to `uv_async_send` may result in a single wakeup notification to the condition.
"""

# ╔═╡ 03baca82-9e19-11eb-1be8-9533cc0aa80a
md"""
## More About Callbacks
"""

# ╔═╡ 03baca9e-9e19-11eb-377c-1753284328d3
md"""
For more details on how to pass callbacks to C libraries, see this [blog post](https://julialang.org/blog/2013/05/callback).
"""

# ╔═╡ 03bacab4-9e19-11eb-102f-191d55d92849
md"""
## C++
"""

# ╔═╡ 03bacadc-9e19-11eb-0299-dbbb1a4ad7bf
md"""
For direct C++ interfacing, see the [Cxx](https://github.com/Keno/Cxx.jl) package. For tools to create C++ bindings, see the [CxxWrap](https://github.com/JuliaInterop/CxxWrap.jl) package.
"""

# ╔═╡ 03bacb42-9e19-11eb-2cdf-25d9cc2536d2
md"""
[^1]: Non-library function calls in both C and Julia can be inlined and thus may have even less overhead than calls to shared library functions. The point above is that the cost of actually doing foreign function call is about the same as doing a call in either native language.
"""

# ╔═╡ 03bacb86-9e19-11eb-2d94-633aece5aee5
md"""
[^2]: The [Clang package](https://github.com/ihnorton/Clang.jl) can be used to auto-generate Julia code from a C header file.
"""

# ╔═╡ Cell order:
# ╟─03ba643e-9e19-11eb-070f-c5685933a98f
# ╟─03ba6510-9e19-11eb-10df-993861137fab
# ╟─03ba6556-9e19-11eb-133c-03e4c16ea76b
# ╟─03ba657e-9e19-11eb-2895-4bd0db5a8e87
# ╟─03ba659c-9e19-11eb-23dd-97c7b0056b3c
# ╟─03ba65ee-9e19-11eb-2477-63f2afd0e864
# ╟─03ba6620-9e19-11eb-1c97-69ee84b964fe
# ╟─03ba6826-9e19-11eb-0b69-95ce6ac3d4d2
# ╟─03ba692a-9e19-11eb-3bbf-65a779ebfc43
# ╟─03ba6966-9e19-11eb-17b7-a59fbb060037
# ╟─03ba698e-9e19-11eb-3c34-5b9dbdeb1d9a
# ╠═03ba70dc-9e19-11eb-00b7-994dc86689e5
# ╠═03ba70e6-9e19-11eb-0f9d-056c7177f56a
# ╠═03ba70e6-9e19-11eb-1be5-0b05eff62259
# ╟─03ba712a-9e19-11eb-17a7-f1a6ce11e8d1
# ╠═03ba7582-9e19-11eb-2600-4f3981054e4c
# ╠═03ba758c-9e19-11eb-1a3c-a126d6bf15ca
# ╟─03ba75be-9e19-11eb-2872-87d81df67f70
# ╠═03ba76ea-9e19-11eb-1a30-833c62c8f558
# ╠═03ba76fc-9e19-11eb-07ec-47c2a8d56333
# ╟─03ba7730-9e19-11eb-2a7e-934f91d92d0d
# ╟─03ba7780-9e19-11eb-075d-0bcd26e517bc
# ╟─03ba77bc-9e19-11eb-1727-5787f55f870d
# ╠═03ba79cc-9e19-11eb-1e62-990abda139ef
# ╠═03ba79d8-9e19-11eb-3e09-d32ca380b1fe
# ╟─03ba7b68-9e19-11eb-0461-35b58a7c2700
# ╟─03ba7be0-9e19-11eb-1838-254f9a1def6f
# ╟─03ba7c26-9e19-11eb-2d08-19e8068c81d1
# ╟─03ba7d34-9e19-11eb-1566-8dceda81924b
# ╟─03ba7d66-9e19-11eb-1fbf-05157d76822f
# ╟─03ba7dc0-9e19-11eb-3853-6b7e25968f77
# ╟─03ba7dd2-9e19-11eb-0a24-f92b7f965d21
# ╠═03ba8004-9e19-11eb-13ec-bf1fa8b19722
# ╟─03ba8068-9e19-11eb-1e31-ebe5df70dafb
# ╟─03ba8126-9e19-11eb-2563-a9f456653e3e
# ╟─03ba818a-9e19-11eb-3008-df66929167f9
# ╟─03ba8202-9e19-11eb-1827-498c2d893a73
# ╟─03ba8216-9e19-11eb-3f1f-61909de5d15e
# ╠═03ba82fc-9e19-11eb-0bba-0360b08ab80e
# ╟─03ba8356-9e19-11eb-2791-c9b68103746e
# ╟─03ba83b0-9e19-11eb-0da2-b925d354cb52
# ╠═03ba8c16-9e19-11eb-3ab7-25b50ba4e216
# ╟─03ba8c5c-9e19-11eb-3e80-11e0fcb79ebf
# ╟─03ba8c86-9e19-11eb-1122-697a8c23f369
# ╠═03ba9062-9e19-11eb-124a-37cfc86c5817
# ╟─03ba90a8-9e19-11eb-32ef-99bac8057fee
# ╟─03ba90ba-9e19-11eb-3f33-9744fc47114f
# ╠═03ba9878-9e19-11eb-3d56-83b31eb6a7d5
# ╠═03ba9882-9e19-11eb-2c74-c95c2cb584c9
# ╠═03ba9882-9e19-11eb-0180-f502636abf8b
# ╟─03ba98b4-9e19-11eb-33b7-79941b911c70
# ╟─03ba98e6-9e19-11eb-2530-2bbdb5f1f964
# ╟─03ba9904-9e19-11eb-1e18-e580ab54940b
# ╟─03ba9918-9e19-11eb-3699-033157ee3bd1
# ╟─03ba9940-9e19-11eb-02e3-833ef4fbdac7
# ╟─03ba9972-9e19-11eb-10e0-c3571e5f3811
# ╟─03ba999a-9e19-11eb-073f-954275b460a7
# ╟─03ba99b8-9e19-11eb-2e2f-f728269c846b
# ╟─03ba99d6-9e19-11eb-3267-89b031045100
# ╟─03ba99ea-9e19-11eb-2458-a55daa3d1007
# ╟─03ba9a12-9e19-11eb-0ee4-896ab1070b70
# ╟─03ba9a3a-9e19-11eb-3953-21f73ce26e75
# ╟─03ba9a4e-9e19-11eb-2815-4f223883d18f
# ╟─03ba9a58-9e19-11eb-3444-bd24d968eaec
# ╟─03ba9d62-9e19-11eb-04af-256f30b72ae3
# ╟─03ba9d78-9e19-11eb-3f16-61e2a2f0cc25
# ╟─03ba9d8c-9e19-11eb-08a2-697f77427793
# ╟─03ba9eca-9e19-11eb-3d39-c59392ac86be
# ╟─03ba9f08-9e19-11eb-3cd3-63efab1cbfca
# ╟─03baa020-9e19-11eb-0f38-f3041999a2b4
# ╟─03baa03e-9e19-11eb-13bc-a7268d0ab61f
# ╟─03baa05c-9e19-11eb-2abd-332525c94728
# ╟─03baa4d0-9e19-11eb-189c-776c8484fe51
# ╟─03baa516-9e19-11eb-069e-13eea6eb58ba
# ╟─03baa52a-9e19-11eb-37e3-074447d12d6b
# ╟─03baa5f2-9e19-11eb-0e40-57d7ddc8ac0f
# ╟─03baa660-9e19-11eb-309f-e72dc24723ef
# ╟─03baa6ce-9e19-11eb-0be4-b711c5ee1daa
# ╟─03baa708-9e19-11eb-37d7-fb40547c2989
# ╟─03baa76e-9e19-11eb-1e9a-a18960ed70c4
# ╟─03baa7d2-9e19-11eb-3c32-b3440aa38b36
# ╟─03baa868-9e19-11eb-1a8f-fbe79371a208
# ╟─03baa946-9e19-11eb-3811-35a6a1d5f446
# ╟─03baa9c6-9e19-11eb-001a-3b2c14c9c13e
# ╟─03baa9f8-9e19-11eb-3792-35bd8aca52f5
# ╟─03baaa0c-9e19-11eb-3e1e-49f14ee1893b
# ╟─03baaa34-9e19-11eb-141e-978b1ac332d4
# ╟─03baaa52-9e19-11eb-2065-157c58ec8517
# ╟─03baaa70-9e19-11eb-1459-815771b5f75a
# ╟─03baaa84-9e19-11eb-3819-f379590944ae
# ╟─03baaaa2-9e19-11eb-05bd-87024cf0076d
# ╠═03baab92-9e19-11eb-1cac-b39717648548
# ╟─03baabb2-9e19-11eb-1bdb-f38fdc115de6
# ╟─03baabce-9e19-11eb-2d79-b769cc5f99d1
# ╟─03baabec-9e19-11eb-1d6d-e974b31bbbf8
# ╠═03baac82-9e19-11eb-1164-279bdcfdb459
# ╟─03baac96-9e19-11eb-14cd-43d1cfccbb4b
# ╟─03baacb4-9e19-11eb-2407-7f2eb587e5d7
# ╟─03baacbe-9e19-11eb-27f0-695203ab75ec
# ╟─03baace6-9e19-11eb-32d4-c5542354477f
# ╟─03baacf0-9e19-11eb-1fe7-49252ec9e245
# ╟─03baad1a-9e19-11eb-0351-b30e11cd9f71
# ╟─03baad36-9e19-11eb-39ab-099ef3386d65
# ╟─03baad4c-9e19-11eb-3086-81a0c908e780
# ╟─03baad5e-9e19-11eb-328d-81dc589ba23a
# ╟─03baae30-9e19-11eb-0f64-456e331f0e76
# ╟─03baae44-9e19-11eb-2d4a-c9708df3996a
# ╠═03baaf66-9e19-11eb-0d1b-7b19cb35500d
# ╟─03baaf84-9e19-11eb-13a6-b37fa9f730af
# ╟─03baafb8-9e19-11eb-0cff-3d3154433bdf
# ╟─03baafca-9e19-11eb-3049-8dacb9ba32a0
# ╟─03baafea-9e19-11eb-2f24-b120cb394903
# ╟─03bab006-9e19-11eb-1a96-9f7cdf48b886
# ╟─03bab02e-9e19-11eb-3504-f5dcb4149295
# ╟─03bab038-9e19-11eb-2a8f-1bca1b253edc
# ╟─03bab07c-9e19-11eb-1bfc-219e1e88bb55
# ╟─03bab09c-9e19-11eb-08ae-85f677864a36
# ╟─03bab0ae-9e19-11eb-0e6f-3f71211fad89
# ╟─03bab0d8-9e19-11eb-295c-23137afb31bf
# ╟─03bab100-9e19-11eb-37ed-51662fabb119
# ╟─03bab678-9e19-11eb-0a11-9dcd4572f90e
# ╟─03bab696-9e19-11eb-22cd-09289bb5cea2
# ╟─03bab6aa-9e19-11eb-0d7d-e910c94559cd
# ╟─03babb1e-9e19-11eb-0600-55e73cfeccab
# ╟─03babb32-9e19-11eb-200c-7960e1c060b5
# ╟─03babb58-9e19-11eb-3398-f3aa15df6629
# ╟─03babb8a-9e19-11eb-15e8-af693362adde
# ╟─03babbb4-9e19-11eb-29ee-fb5c8b460f40
# ╟─03babbc8-9e19-11eb-1dba-bfad8a17d3cc
# ╟─03babbdc-9e19-11eb-12b5-e906af5496fb
# ╟─03babbfa-9e19-11eb-113e-755f1186864b
# ╟─03babc36-9e19-11eb-14c9-5fadff63a682
# ╟─03babc68-9e19-11eb-0b33-93d0aafd36f5
# ╟─03babc7c-9e19-11eb-2e1d-fd56c431124e
# ╟─03babc9a-9e19-11eb-05f7-414f39bfdcf3
# ╟─03babcc0-9e19-11eb-1972-73128532342e
# ╟─03babce0-9e19-11eb-3352-1b3d38ef7dfa
# ╟─03babcfe-9e19-11eb-348a-65750ec19005
# ╟─03babd1c-9e19-11eb-319e-9bf24702cf30
# ╟─03babd30-9e19-11eb-01b3-81eed4530fda
# ╟─03babd4e-9e19-11eb-3565-6749b7cb5f5e
# ╟─03babd64-9e19-11eb-12bb-91c882f06a12
# ╟─03babd8a-9e19-11eb-1bfe-cb19f9fd3ed7
# ╟─03babd9e-9e19-11eb-379d-1bf4f3b0b5bd
# ╟─03babdb2-9e19-11eb-1339-632b6905c15b
# ╟─03babdee-9e19-11eb-0088-61995c334b94
# ╟─03babe20-9e19-11eb-21f0-ab0ed4d80030
# ╟─03babe3e-9e19-11eb-0e2f-63cb749761f7
# ╟─03babe5a-9e19-11eb-377f-2b892ec0853b
# ╟─03babe70-9e19-11eb-0617-8d4c589d772d
# ╟─03babe84-9e19-11eb-3211-f96ae4249056
# ╠═03bac2e4-9e19-11eb-3617-b14a594af991
# ╟─03bac336-9e19-11eb-19d8-1df6845cda0a
# ╟─03bac348-9e19-11eb-3dda-6dbb1f46f9f8
# ╟─03bac35c-9e19-11eb-07a6-b5e65c59f88f
# ╟─03bac384-9e19-11eb-0d14-ebd342700eb9
# ╟─03bac396-9e19-11eb-0157-f7588ae5895a
# ╟─03bac3b6-9e19-11eb-1df4-4ba219099721
# ╟─03bac3c8-9e19-11eb-3340-03746aaeacc3
# ╟─03bac3f2-9e19-11eb-3ba7-23b663f4755f
# ╟─03bac410-9e19-11eb-021f-ab6cfc245557
# ╟─03bac474-9e19-11eb-0d5e-b9382215cc92
# ╟─03bac47e-9e19-11eb-2243-874000b3115f
# ╟─03bac49e-9e19-11eb-194a-754e692c9ac1
# ╟─03bac4c4-9e19-11eb-0d9c-252e42d3f354
# ╟─03bac4d8-9e19-11eb-03be-bdf4637400b6
# ╟─03bac4ec-9e19-11eb-1f9d-a35e73f2665a
# ╟─03bac51e-9e19-11eb-0cce-2b39de108e4e
# ╟─03bac530-9e19-11eb-0f06-031372390425
# ╟─03bac546-9e19-11eb-3c46-c36fa3d2ea10
# ╟─03bac564-9e19-11eb-3101-ed594ae0fbf0
# ╟─03bac582-9e19-11eb-313f-ad01bf457021
# ╟─03bac596-9e19-11eb-208c-97071ffb3c6e
# ╟─03bac5aa-9e19-11eb-1bc8-576c95af6988
# ╟─03bac5d4-9e19-11eb-1f88-394fbdc5573f
# ╠═03bac82a-9e19-11eb-3302-e79f86fbd4a6
# ╟─03bac848-9e19-11eb-07f8-734babd97055
# ╟─03bac8c0-9e19-11eb-1330-c7da97dba148
# ╟─03bac8e8-9e19-11eb-1fe9-b78a2a1f7335
# ╟─03bac8fc-9e19-11eb-250d-2df802d83e9c
# ╟─03bac924-9e19-11eb-250a-a7c19535459f
# ╟─03bac936-9e19-11eb-1e44-ed9377e9d329
# ╟─03bac974-9e19-11eb-1649-cd4d30d86aa9
# ╟─03bac988-9e19-11eb-3a2d-454bbd82faa1
# ╟─03bac99c-9e19-11eb-2e73-5b018465d5fc
# ╟─03bac9c4-9e19-11eb-1be4-252bf5f46b49
# ╟─03bac9ec-9e19-11eb-232e-8152671fa243
# ╟─03baca00-9e19-11eb-3bb6-7563249ae6ff
# ╟─03baca1e-9e19-11eb-23f4-61636b8e0f1b
# ╟─03baca3e-9e19-11eb-0895-e52e18e8e687
# ╟─03baca64-9e19-11eb-3b5b-1fe2b5a5bff9
# ╟─03baca78-9e19-11eb-1e5b-1710804e0637
# ╟─03baca82-9e19-11eb-1be8-9533cc0aa80a
# ╟─03baca9e-9e19-11eb-377c-1753284328d3
# ╟─03bacab4-9e19-11eb-102f-191d55d92849
# ╟─03bacadc-9e19-11eb-0299-dbbb1a4ad7bf
# ╟─03bacb42-9e19-11eb-2cdf-25d9cc2536d2
# ╟─03bacb86-9e19-11eb-2d94-633aece5aee5
